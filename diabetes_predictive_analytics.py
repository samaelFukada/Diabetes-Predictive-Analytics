# -*- coding: utf-8 -*-
"""diabetes-predictive-analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hiF6831XYY7stIyoAZqbo-1utTD-7JK3

# Predictive Analytics: Diagnosa Diabetes
* dibuat oleh: Ahmad Reginald Syahiran

# Business Understanding

Pengembangan model prediksi diagnosis diabetes memiliki potensi untuk memberikan manfaat bagi berbagai pihak, termasuk tenaga medis dan pasien. Model ini dapat membantu dalam deteksi dini diabetes, meningkatkan efektivitas pengelolaan penyakit, dan meningkatkan kualitas hidup pasien. Contoh potensi manfaat dari prediksi diagnosis diabetes yang akurat adalah membantu tenaga medis dalam pengambilan keputusan klinis serta memungkinkan pasien untuk mengambil langkah pencegahan lebih awal guna mencegah komplikasi di masa depan.

# Data Understanding

## Tentang Dataset

Dataset ini berisi data kesehatan komprehensif untuk 1.879 pasien, yang diidentifikasi secara unik dengan ID yang berkisar dari 6000 hingga 7878. Data ini mencakup rincian demografis, faktor gaya hidup, riwayat medis, pengukuran klinis, penggunaan obat, gejala, skor kualitas hidup, paparan lingkungan, dan perilaku kesehatan. Setiap pasien terhubung dengan dokter yang bertanggung jawab secara rahasia, memastikan privasi dan kerahasiaan. Dataset ini ideal untuk peneliti dan ilmuwan data yang ingin mengeksplorasi faktor-faktor yang terkait dengan diabetes, mengembangkan model prediktif, dan melakukan analisis statistik.

## Daftar Isi

1. Informasi Pasien
2. ID Pasien
3. Rincian Demografis
4. Faktor Gaya Hidup
5. Riwayat Medis
6. Pengukuran Klinis
7. Obat-obatan
8. Gejala dan Kualitas Hidup
9. Paparan Lingkungan dan Pekerjaan
10. Perilaku Kesehatan
11. Informasi Diagnosa

## Informasi Pasien

### ID Pasien

- **PatientID**: Identifikasi unik yang diberikan kepada setiap pasien (6000 hingga 7878).

### Rincian Demografis

- **Age**: Usia pasien berkisar dari 20 hingga 90 tahun.
- **Gender**: Jenis kelamin pasien, di mana 0 mewakili Laki-laki dan 1 mewakili Perempuan.
- **Ethnicity**: Etnisitas pasien, dikodekan sebagai berikut:
  - 0: Kaukasia
  - 1: Afrika Amerika
  - 2: Asia
  - 3: Lainnya
- **SocioeconomicStatus**: Status sosial ekonomi pasien, dikodekan sebagai berikut:
  - 0: Rendah
  - 1: Menengah
  - 2: Tinggi
- **EducationLevel**: Tingkat pendidikan pasien, dikodekan sebagai berikut:
  - 0: Tidak ada
  - 1: Sekolah Menengah
  - 2: Sarjana
  - 3: Lebih Tinggi

### Faktor Gaya Hidup

- **BMI**: Indeks Massa Tubuh pasien, berkisar dari 15 hingga 40.
- **Smoking**: Status merokok, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **AlcoholConsumption**: Konsumsi alkohol mingguan dalam satuan, berkisar dari 0 hingga 20.
- **PhysicalActivity**: Aktivitas fisik mingguan dalam jam, berkisar dari 0 hingga 10.
- **DietQuality**: Skor kualitas diet, berkisar dari 0 hingga 10.
- **SleepQuality**: Skor kualitas tidur, berkisar dari 4 hingga 10.

### Riwayat Medis

- **FamilyHistoryDiabetes**: Riwayat keluarga dengan diabetes, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **GestationalDiabetes**: Riwayat diabetes gestasional, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **PolycysticOvarySyndrome**: Kehadiran sindrom ovarium polikistik, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **PreviousPreDiabetes**: Riwayat pre-diabetes sebelumnya, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **Hypertension**: Kehadiran hipertensi, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.

### Pengukuran Klinis

- **SystolicBP**: Tekanan darah sistolik, berkisar dari 90 hingga 180 mmHg.
- **DiastolicBP**: Tekanan darah diastolik, berkisar dari 60 hingga 120 mmHg.
- **FastingBloodSugar**: Tingkat gula darah puasa, berkisar dari 70 hingga 200 mg/dL.
- **HbA1c**: Tingkat Hemoglobin A1c, berkisar dari 4,0% hingga 10,0%.
- **SerumCreatinine**: Tingkat kreatinin serum, berkisar dari 0,5 hingga 5,0 mg/dL.
- **BUNLevels**: Tingkat Urea Nitrogen Darah, berkisar dari 5 hingga 50 mg/dL.
- **CholesterolTotal**: Tingkat kolesterol total, berkisar dari 150 hingga 300 mg/dL.
- **CholesterolLDL**: Tingkat kolesterol LDL (Low-density lipoprotein), berkisar dari 50 hingga 200 mg/dL.
- **CholesterolHDL**: Tingkat kolesterol HDL (High-density lipoprotein), berkisar dari 20 hingga 100 mg/dL.
- **CholesterolTriglycerides**: Tingkat trigliserida, berkisar dari 50 hingga 400 mg/dL.

### Obat-obatan

- **AntihypertensiveMedications**: Penggunaan obat antihipertensi, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **Statins**: Penggunaan statin, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **AntidiabeticMedications**: Penggunaan obat antidiabetes, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.

### Gejala dan Kualitas Hidup

- **FrequentUrination**: Kehadiran sering buang air kecil, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **ExcessiveThirst**: Kehadiran rasa haus yang berlebihan, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **UnexplainedWeightLoss**: Kehadiran penurunan berat badan yang tidak dapat dijelaskan, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **FatigueLevels**: Tingkat kelelahan, berkisar dari 0 hingga 10.
- **BlurredVision**: Kehadiran penglihatan kabur, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **SlowHealingSores**: Kehadiran luka yang sembuh dengan lambat, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **TinglingHandsFeet**: Kehadiran kesemutan di tangan atau kaki, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **QualityOfLifeScore**: Skor kualitas hidup, berkisar dari 0 hingga 100.

### Paparan Lingkungan dan Pekerjaan

- **HeavyMetalsExposure**: Paparan logam berat, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **OccupationalExposureChemicals**: Paparan bahan kimia berbahaya dalam pekerjaan, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.
- **WaterQuality**: Kualitas air, di mana 0 menunjukkan Baik dan 1 menunjukkan Buruk.

### Perilaku Kesehatan

- **MedicalCheckupsFrequency**: Frekuensi pemeriksaan medis per tahun, berkisar dari 0 hingga 4.
- **MedicationAdherence**: Skor kepatuhan terhadap pengobatan, berkisar dari 0 hingga 10.
- **HealthLiteracy**: Skor literasi kesehatan, berkisar dari 0 hingga 10.

## Informasi Diagnosa (Variabel Target)

- **Diagnosis**: Status diagnosis untuk Diabetes, di mana 0 menunjukkan Tidak dan 1 menunjukkan Ya.

### Import Library yang Dibutuhkan
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""## Data Loading"""

df = pd.read_csv("/kaggle/input/diabetes-health-dataset-analysis/diabetes_data.csv")
df.head(5)

"""## Exploratory Data Analysis - Deskripsi Variabel"""

df.info()

"""data tidak mempunyai missing value"""

df.describe()

for col in df.columns:
    print(f"{col}: {df[col].nunique()}")

"""Categorical Features:
  * Gender: (0: Male, 1: Female)
  * Ethnicity: (0: Caucasian, 1: African American, 2: Asian, 3: Other)
  * SocioeconomicStatus: (0: Low, 1: Middle, 2: High)
  * EducationLevel: (0: None, 1: High School, 2: Bachelor's, 3: Higher)
  * Smoking: (0: No, 1: Yes)
  * FamilyHistoryDiabetes: (0: No, 1: Yes)
  * GestationalDiabetes: (0: No, 1: Yes)
  * PolycysticOvarySyndrome: (0: No, 1: Yes)
  * PreviousPreDiabetes: (0: No, 1: Yes)
  * Hypertension: (0: No, 1: Yes)
  * AntihypertensiveMedications: (0: No, 1: Yes)
  * Statins: (0: No, 1: Yes)
  * AntidiabeticMedications: (0: No, 1: Yes)
  * FrequentUrination: (0: No, 1: Yes)
  * ExcessiveThirst: (0: No, 1: Yes)
  * UnexplainedWeightLoss: (0: No, 1: Yes)
  * BlurredVision: (0: No, 1: Yes)
  * SlowHealingSores: (0: No, 1: Yes)
  * TinglingHandsFeet: (0: No, 1: Yes)
  * HeavyMetalsExposure: (0: No, 1: Yes)
  * OccupationalExposureChemicals: (0: No, 1: Yes)
  * WaterQuality: (0: Good, 1: Poor)
  * Diagnosis: (0: No, 1: Yes) - Target Variable

Numerical Features:
  * PatientID: ID unik untuk setiap pasien
  * Age: Usia pasien (20-90 tahun)
  * BMI: Indeks Massa Tubuh (15-40)
  * AlcoholConsumption: Konsumsi alkohol mingguan dalam unit (0-20)
  * PhysicalActivity: Aktivitas fisik mingguan dalam jam (0-10)
  * DietQuality: Skor kualitas diet (0-10)
  * SleepQuality: Skor kualitas tidur (4-10)
  * SystolicBP: Tekanan darah sistolik (90-180 mmHg)
  * DiastolicBP: Tekanan darah diastolik (60-120 mmHg)
  * FastingBloodSugar: Gula darah puasa (70-200 mg/dL)
  * HbA1c: Tingkat Hemoglobin A1c (4.0%-10.0%)
  * SerumCreatinine: Tingkat kreatinin serum (0.5-5.0 mg/dL)
  * BUNLevels: Tingkat Urea Nitrogen Darah (5-50 mg/dL)
  * CholesterolTotal: Kolesterol total (150-300 mg/dL)
  * CholesterolLDL: Kolesterol LDL (50-200 mg/dL)
  * CholesterolHDL: Kolesterol HDL (20-100 mg/dL)
  * CholesterolTriglycerides: Trigliserida (50-400 mg/dL)
  * FatigueLevels: Tingkat kelelahan (0-10)
  * QualityOfLifeScore: Skor kualitas hidup (0-100)
  * MedicalCheckupsFrequency: Frekuensi pemeriksaan medis per tahun (0-4)
  * MedicationAdherence: Skor kepatuhan terhadap pengobatan (0-10)
  * HealthLiteracy: Skor literasi kesehatan (0-10)

Dikarenakan kolom PatientID dan DoctorIncharge tidak mempengaruhi model maka kolom akan dihapus.
"""

df = df.drop(['PatientID', 'DoctorInCharge'], axis=1)
df

numerical_features = [
    'Age',
    'BMI',
    'AlcoholConsumption',
    'PhysicalActivity',
    'DietQuality',
    'SleepQuality',
    'SystolicBP',
    'DiastolicBP',
    'FastingBloodSugar',
    'HbA1c',
    'SerumCreatinine',
    'BUNLevels',
    'CholesterolTotal',
    'CholesterolLDL',
    'CholesterolHDL',
    'CholesterolTriglycerides',
    'FatigueLevels',
    'QualityOfLifeScore',
    'MedicalCheckupsFrequency',
    'MedicationAdherence',
    'HealthLiteracy'
]

categorical_features = [
    'Gender',
    'Ethnicity',
    'SocioeconomicStatus',
    'EducationLevel',
    'Smoking',
    'FamilyHistoryDiabetes',
    'GestationalDiabetes',
    'PolycysticOvarySyndrome',
    'PreviousPreDiabetes',
    'Hypertension',
    'AntihypertensiveMedications',
    'Statins',
    'AntidiabeticMedications',
    'FrequentUrination',
    'ExcessiveThirst',
    'UnexplainedWeightLoss',
    'BlurredVision',
    'SlowHealingSores',
    'TinglingHandsFeet',
    'HeavyMetalsExposure',
    'OccupationalExposureChemicals',
    'WaterQuality',
    'Diagnosis'
]

"""* numerical features: 21
* categorical features: 22, exclude target variable
"""

non_used = ['Diagnosis']
# Mengecualikan kolom non_used dari numerical_features
numerical_features = [col for col in numerical_features if col not in non_used]

# Pilih kolom yang ada di numerical_features dari data
num_dist = df[numerical_features]

"""### Analisis Box Plot"""

import warnings
warnings.filterwarnings("ignore")

plt.figure(figsize=(20, 60))

# Grid 7 baris x 3 kolom
for i in range(21):
    plt.subplot(7, 3, i + 1)
    sns.boxplot(y=num_dist.iloc[:, i], color='red')  # Membuat boxplot untuk setiap kolom
    plt.title(num_dist.columns[i])  # Menambahkan judul berdasarkan nama kolom
    plt.tight_layout()

plt.show()

"""tidak ada fitur yang outliers

## Univariate Analysis

### Numerical Features
"""

plt.figure(figsize=(20, 60))

for i in range(21):
    plt.subplot(7, 3, i + 1)
    sns.histplot(num_dist.iloc[:, i], color='red', kde=True)
    plt.tight_layout()

plt.show()

"""Distribusi Data:
* Sebagian besar variabel memiliki distribusi yang relatif merata, tanpa adanya puncak yang sangat menonjol atau distribusi yang sangat miring. Ini mungkin menunjukkan bahwa data tersebar cukup merata di berbagai kategori atau rentang nilai.

Jumlah Observasi:
* Jumlah observasi cukup konsisten di seluruh variabel, karena tinggi batang histogram tidak menunjukkan perbedaan besar antara satu histogram dengan yang lainnya.

Bentuk Distribusi:
* histogram memiliki bentuk yang mendekati distribusi normal atau seragam

### Categorical Features
"""

#categorical_features = [col for col in categorical_features if col not in non_used]
categorical_dist = df[categorical_features]

plt.figure(figsize=(20, 60))

for i in range(23):
    plt.subplot(8, 3, i + 1)

    # Membuat countplot untuk setiap kolom
    ax = sns.countplot(x=categorical_dist.iloc[:, i], color='red')

    # Menambahkan jumlah sampel dan persentasenya
    total = len(categorical_dist)
    for p in ax.patches:
        count = p.get_height()
        percentage = f'{100 * count / total:.1f}%'
        ax.annotate(f'{count}\n({percentage})',
                    (p.get_x() + p.get_width() / 2., count),
                    ha='center', va='center',
                    xytext=(0, 5),
                    textcoords='offset points')

    # Menambahkan judul berdasarkan nama kolom
    plt.title(categorical_dist.columns[i])

    plt.tight_layout()

plt.show()

"""* Gender: Distribusi gender terlihat cukup seimbang dengan jumlah yang hampir sama antara laki-laki dan perempuan.
* Ethnicity: Kelompok etnis 0 mendominasi data ini, diikuti oleh etnis 2, dengan etnis 1 dan 3 memiliki jumlah yang jauh lebih kecil.
* Socioeconomic Status: Status sosial ekonomi 1 memiliki jumlah terbesar, diikuti oleh status 2 dan kemudian status 0.
* Education Level: Tingkat pendidikan 2 dan 1 memiliki jumlah terbesar, sementara tingkat 3 dan 0 memiliki jumlah yang lebih rendah.
* Smoking: Mayoritas sampel tidak merokok (label 0), sementara yang merokok (label 1) lebih sedikit.
* Family History of Diabetes: Sebagian besar orang tidak memiliki riwayat keluarga dengan diabetes (label 0), tetapi ada sebagian yang memiliki (label 1).
* Gestational Diabetes: Sebagian besar sampel tidak memiliki diabetes gestasional (label 0), dan sangat sedikit yang memilikinya (label 1).
* Polycystic Ovary Syndrome: Sangat sedikit sampel yang memiliki sindrom ovarium polikistik (label 1), dengan mayoritas tidak memilikinya (label 0).
* Previous Pre-diabetes: Mayoritas sampel tidak memiliki riwayat pre-diabetes (label 0), dengan sebagian kecil yang memiliki (label 1).
* Hypertension: Sebagian besar sampel tidak memiliki hipertensi (label 0), dan hanya sebagian kecil yang memilikinya (label 1).
* Antihypertensive Medications: Sebagian besar sampel tidak menggunakan obat antihipertensi (label 0), dengan sebagian kecil yang menggunakannya (label 1).
* Statins: Sebagian besar sampel tidak menggunakan statin (label 0), namun ada sebagian yang menggunakan (label 1).
* Antidiabetic Medications: Mayoritas tidak menggunakan obat antidiabetes (label 0), dengan sebagian kecil yang menggunakannya (label 1).
* Frequent Urination: Sebagian besar sampel tidak melaporkan sering buang air kecil (label 0), dengan sebagian kecil yang melaporkannya (label 1).
* Excessive Thirst: Sebagian besar tidak mengalami haus berlebihan (label 0), dengan sebagian kecil yang mengalaminya (label 1).
* Unexplained Weight Loss: Mayoritas tidak mengalami penurunan berat badan yang tidak dapat dijelaskan (label 0), dengan sebagian kecil yang mengalaminya (label 1).
* Blurred Vision: Sebagian besar sampel tidak mengalami penglihatan kabur (label 0), dengan sebagian kecil yang mengalaminya (label 1).
* Tingling in Hands/Feet: Mayoritas sampel tidak mengalami kesemutan di tangan/kaki (label 0), dengan sebagian kecil yang mengalaminya (label 1).
* Heavy Metal Exposure: Mayoritas tidak terpapar logam berat (label 0), dengan sebagian kecil yang terpapar (label 1).
* Occupational Exposure to Chemicals: Sebagian besar sampel tidak terpapar bahan kimia di tempat kerja (label 0), dengan sebagian kecil yang terpapar (label 1).
* Water Quality: Mayoritas tidak mengalami masalah dengan kualitas air (label 0), dengan sebagian kecil yang mengalaminya (label 1).
* Diagnosis: Distribusi diagnosis menunjukkan bahwa mayoritas sampel didiagnosis negatif (label 0), dengan sebagian yang didiagnosis positif (label 1).

## Multivariate Analysis

### Categorical Features
"""

categorical_features = [col for col in categorical_features if col not in non_used]
categorical_dist = df[categorical_features]

# Tentukan grid layout
fig, axes = plt.subplots(8, 3, figsize=(20, 40))
axes = axes.flatten()

# Iterasi dan plot
for i, col in enumerate(categorical_dist):
    sns.countplot(x=col, hue='Diagnosis', data=df, ax=axes[i])
    axes[i].set_title(f"Rata-rata 'Diagnosis' Relatif terhadap - {col}")
    axes[i].legend(title='Diagnosis')

for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

"""Gender:
* Tampaknya terdapat perbedaan yang signifikan antara jumlah pria dan wanita yang didiagnosis dengan kondisi tertentu (*Diagnosis 1*).
* Lebih banyak wanita yang tidak didiagnosis (*Diagnosis 0*) dibandingkan pria.

Ethnicity:
* Mayoritas pasien yang didiagnosis berasal dari etnis Kaukasia.
* Etnis lain memiliki representasi yang jauh lebih sedikit dalam data ini.

Socioeconomic Status:
* Orang dengan status sosioekonomi 2 tampaknya memiliki distribusi yang lebih seimbang antara didiagnosis atau tidak, sementara status lainnya menunjukkan distribusi yang lebih condong ke salah satu hasil diagnosis.

Education Level:
* Tampaknya terdapat variasi pada tingkat pendidikan yang lebih tinggi, dengan beberapa kelompok menunjukkan lebih banyak kasus diagnosis tertentu.

Smoking:
* Lebih banyak perokok yang tidak didiagnosis (*Diagnosis 0*) dibandingkan yang didiagnosis (*Diagnosis 1*).
* Ini mungkin menunjukkan korelasi negatif antara kebiasaan merokok dan kondisi diagnosis tertentu.

Family History of Diabetes:
* Tampaknya ada perbedaan yang signifikan di mana mereka yang memiliki riwayat keluarga diabetes lebih mungkin didiagnosis dengan kondisi tertentu.

Gestational Diabetes & Polycystic Ovary Syndrome:
* Kedua variabel ini menunjukkan bahwa mereka yang memiliki riwayat gestational diabetes atau sindrom ovarium polikistik cenderung lebih mungkin didiagnosis dengan kondisi tertentu.

Hypertension & Antihypertensive Medications:
* Pasien dengan riwayat hipertensi dan yang menggunakan obat antihipertensi cenderung lebih banyak yang didiagnosis.

Symptoms (Frequent Urination, Excessive Thirst, Blurred Vision, etc.):
* Gejala-gejala ini menunjukkan korelasi yang kuat dengan diagnosis, di mana mereka yang melaporkan gejala-gejala ini cenderung lebih banyak yang didiagnosis dengan kondisi tertentu.

Occupational Exposure to Chemicals:
* Paparan bahan kimia dalam pekerjaan menunjukkan bahwa ada kecenderungan pasien yang terpapar bahan kimia ini lebih banyak didiagnosis.


Dari grafik tersebut, terlihat jelas bahwa variabel-variabel tertentu seperti riwayat keluarga, kondisi medis sebelumnya, dan paparan terhadap faktor risiko tertentu seperti merokok dan paparan bahan kimia memiliki hubungan yang signifikan dengan hasil diagnosis.

### Categorical Features
"""

sns.pairplot(num_dist, diag_kind = 'kde')

# Compute the correlation matrix
corr = df.corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(230, 20, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

plt.show()

# Compute the correlation matrix
corr = df.corr()

# Tampilkan tabel korelasi sebagai DataFrame
corr_table = pd.DataFrame(corr)

# Display tabel korelasi
corr_table

"""Menghapus tabel yang korelasi absolut < 0.001"""

# Misalkan 'target_feature' adalah nama kolom target fitur
target_feature = 'Diagnosis'

# Filter korelasi lemah terhadap target fitur
weak_corr_with_target = corr_table[target_feature][(corr_table[target_feature] > -0.01) & (corr_table[target_feature] < 0.01)]

# Tampilkan hasil
weak_corr_with_target

"""Pertimbangan untuk tidak menghapus CholesterolLDL karena berinteraksi dengan fitur lain seperti CholesterolTotal, CholesterolHDL, dan CholesterolTriglycerides"""

df.drop(['EducationLevel',
        'AlcoholConsumption',
        'PhysicalActivity',
        'SleepQuality',
        'SlowHealingSores',
        'OccupationalExposureChemicals',
        'MedicalCheckupsFrequency'], inplace=True, axis=1)
df.head()

"""# Data Preparation

## Encoding Fitur Kategori

One-Hot Encoding pada fitur Ethnicity fitur kategorikal ini tidak memiliki urutan alami
"""

from sklearn.preprocessing import  OneHotEncoder

df = pd.concat([df, pd.get_dummies(df['Ethnicity'], prefix='Ethnicity')],axis=1)
df.drop(['Ethnicity'], axis=1, inplace=True)
df.head()

"""## Train-Test-Split
menggunakan proporsi pembagian sebesar 80:20 dengan fungsi train_test_split dari sklearn.
"""

from sklearn.model_selection import train_test_split

X = df.drop(["Diagnosis"],axis =1)
y = df["Diagnosis"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## Normalisasi
Normalisasi pada fitur numerical
"""

from sklearn.preprocessing import MinMaxScaler

numerical_features = [
    'Age',
    'BMI',
    'DietQuality',
    'SystolicBP',
    'DiastolicBP',
    'FastingBloodSugar',
    'HbA1c',
    'SerumCreatinine',
    'BUNLevels',
    'CholesterolTotal',
    'CholesterolLDL',
    'CholesterolHDL',
    'CholesterolTriglycerides',
    'FatigueLevels',
    'QualityOfLifeScore',
    'MedicationAdherence',
    'HealthLiteracy'
]

scaler = MinMaxScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])

X_test[numerical_features] = scaler.transform(X_test.loc[:, numerical_features])

X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""# Model Development

## Lazy Predict Library
LazyPredict adalah pustaka Python yang memudahkan proses pemilihan model machine learning. Ia melakukan ini dengan secara otomatis mengevaluasi dan membandingkan berbagai algoritma pembelajaran mesin pada kumpulan data.

Keuntungan menggunakan LazyPredict:
* Cepat dan efisien: LazyPredict dapat dengan cepat mengevaluasi dan membandingkan banyak model, menghemat waktu dan tenaga.
* Mempermudah identifikasi model potensial: Alih-alih mencoba berbagai model secara manual, LazyPredict membantu menemukan model yang berpotensi berkinerja baik pada data.
* Cocok untuk analisis awal dan pembuatan prototipe: LazyPredict memudahkan untuk memulai dengan proyek machine learning dengan cepat tanpa terjebak dalam detail pemilihan model.
"""

!pip install lazypredict -q

from lazypredict.Supervised import LazyClassifier
clf = LazyClassifier()
models,predicts = clf.fit(X_train,X_test,y_train,y_test)
print(models.sort_values(by="Accuracy",ascending=False))

"""Model terpilih:
* XGBClassifier
* RandomForestClassifier
* ExtraTreesClassifier

## Import Models
"""

from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier

models = pd.DataFrame(index=['ROC AUC', 'KS'],
                      columns=['XGBClassfier', 'RandomForestClassifier', 'ExtraTreesClassifier'])

"""### Fungsi ROC AUC dan KS"""

from sklearn.metrics import mean_absolute_error
from sklearn import metrics
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from scipy.stats import ks_2samp
from sklearn.metrics import roc_auc_score

def evaluate_ks_and_roc_auc(y_real, y_proba):
    # Unite both visions to be able to filter
    df = pd.DataFrame()
    df['real'] = y_real
    df['proba'] = y_proba[:, 1]

    # Recover each class
    class0 = df[df['real'] == 0]
    class1 = df[df['real'] == 1]

    ks = ks_2samp(class0['proba'], class1['proba'])
    roc_auc = roc_auc_score(df['real'] , df['proba'])

    print(f"ROC AUC: {roc_auc:.4f}")
    print(f"KS: {ks.statistic:.4f} (p-value: {ks.pvalue:.3e})")
    return ks.statistic, roc_auc

"""### Fungsi Confusion Matrix"""

def plot_confusion_matrix(cm,
                          target_names,
                          title='Confusion matrix',
                          cmap=None,
                          normalize=True):
    """
    given a sklearn confusion matrix (cm), make a nice plot

    Arguments
    ---------
    cm:           confusion matrix from sklearn.metrics.confusion_matrix

    target_names: given classification classes such as [0, 1, 2]
                  the class names, for example: ['high', 'medium', 'low']

    title:        the text to display at the top of the matrix

    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm
                  see http://matplotlib.org/examples/color/colormaps_reference.html
                  plt.get_cmap('jet') or plt.cm.Blues

    normalize:    If False, plot the raw numbers
                  If True, plot the proportions

    Usage
    -----
    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by
                                                              # sklearn.metrics.confusion_matrix
                          normalize    = True,                # show proportions
                          target_names = y_labels_vals,       # list of names of the classes
                          title        = best_estimator_name) # title of graph

    Citiation
    ---------
    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html

    """
    import matplotlib.pyplot as plt
    import numpy as np
    import itertools

    accuracy = np.trace(cm) / np.sum(cm).astype('float')
    misclass = 1 - accuracy

    if cmap is None:
        cmap = plt.get_cmap('Blues')

    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()

    if target_names is not None:
        tick_marks = np.arange(len(target_names))
        plt.xticks(tick_marks, target_names, rotation=45)
        plt.yticks(tick_marks, target_names)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]


    thresh = cm.max() / 1.5 if normalize else cm.max() / 2
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        if normalize:
            plt.text(j, i, "{:0.4f}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")
        else:
            plt.text(j, i, "{:,}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")


    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))
    plt.show()

"""## XGBClassifier"""

# Main pipeline for fitting.
model_XGB = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
model_XGB.fit(X_train, y_train)
print("Training is success!")
y_pred = model_XGB.predict_proba(X_test)
predicted = model_XGB.predict(X_test)
#print AUC, KS score, and classification report
ks, auc = evaluate_ks_and_roc_auc(y_test, y_pred)
matrix = classification_report(y_test, predicted)
print('Classification report XGBoost Classifier : \n',matrix)
cm = confusion_matrix(y_test, predicted)
target_names = ["Indicates No","Indicates Yes"]
plot_confusion_matrix(cm, target_names, title='Confusion matrix', cmap=None,normalize=False)

models.loc['ROC AUC','XGBClassfier'] = auc
models.loc['KS','XGBClassfier'] = ks

"""## RandomForestClassifier"""

# Main pipeline for fitting.
model_rf = RandomForestClassifier(max_depth= 20)
model_rf.fit(X_train, y_train)
print("Training is success!")
y_pred = model_rf.predict_proba(X_test)
predicted = model_rf.predict(X_test)
#print AUC, KS score, and classification report
ks, auc = evaluate_ks_and_roc_auc(y_test, y_pred)
matrix = classification_report(y_test, predicted)
print('Classification report RandomForestClassifier : \n',matrix)
cm = confusion_matrix(y_test, predicted)
target_names = ["Indicates No","Indicates Yes"]
plot_confusion_matrix(cm, target_names, title='Confusion matrix', cmap=None,normalize=False)

models.loc['ROC AUC','RandomForestClassifier'] = auc
models.loc['KS','RandomForestClassifier'] = ks

"""## ExtraTreesClassifier"""

# Main pipeline for fitting.
model_etc = ExtraTreesClassifier(n_estimators=100, max_depth= 10,n_jobs= 2,random_state= 100)
model_etc.fit(X_train, y_train)
print("Training is success!")
y_pred = model_etc.predict_proba(X_test)
predicted = model_etc.predict(X_test)
#print AUC, KS score, and classification report
ks, auc = evaluate_ks_and_roc_auc(y_test, y_pred)
matrix = classification_report(y_test, predicted)
print('Classification report ExtraTreesClassifier : \n',matrix)
cm = confusion_matrix(y_test, predicted)
target_names = ["Indicates No","Indicates Yes"]
plot_confusion_matrix(cm, target_names, title='Confusion matrix', cmap=None,normalize=False)

models.loc['ROC AUC','ExtraTreesClassifier'] = auc
models.loc['KS','ExtraTreesClassifier'] = ks

# Membuat barplot
models.T.plot(kind='bar', figsize=(10, 6))

# Menambahkan judul dan label
plt.title('ROC AUC dan KS untuk Berbagai Classifier')
plt.ylabel('Score')
plt.xticks(rotation=0)
plt.legend(title='Metrics')
plt.ylim(0.8, 1.0)

"""Kesimpulan:
* XGBoost memiliki nilai ROC AUC dan KS tertinggi, menunjukkan kemampuan model yang kuat dalam membedakan antara kelas.

### Top 10 Features in XGBoost
"""

# Extract the features and importance of the XGBoost model
feature_importances = pd.DataFrame()
feature_importances['feature'] = X_train.columns
feature_importances['importance'] = model_XGB.feature_importances_

# Visualization of the 10 most important features
plt.figure(figsize=(10, 6))
plot = feature_importances.sort_values('importance', ascending=False).head(10).plot.barh(color='blue', legend=None)
plot.set_yticklabels(feature_importances.sort_values('importance', ascending=False).head(10).feature)
plt.title('10 Most Important Features in the XGBoost Model')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.gca().invert_yaxis()
plt.show()